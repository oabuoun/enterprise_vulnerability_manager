from flask import Flask, make_response, request, render_template, redirect, jsonify, flash, url_for
from random import random
#import jwt
import datetime
import sqlite3
from flask_mysqldb import MySQL
import MySQLdb.cursors
import re
from contextlib import closing
import time
import yagmail
import sendaccountemail as sendaccountemail

import mysql.connector
from sql_init import userDB
import projectcommands as ProjectCommands
import underlingscommands as UC
from passwordcheck import pchecker
pcheck=pchecker()

flaskapp = Flask(__name__)

flaskapp.config['SECRET_KEY'] = '@#$%^&*('

mydb=userDB()
mycursor = mydb.cursor

@flaskapp.route('/createpass', methods = ['GET','POST'])
def createpass():
    if request.method =='POST':
        password = request.form.get('password')
        print(pchecker.pass_check(password))
        resp = make_response(jsonify({'url':url_for('success')}))
        return resp
    return render_template("pass_create.html")

@flaskapp.route('/createuser', methods=['POST','GET'])
def send():
    return render_template('user_create.html')


@flaskapp.route('/admin', methods=['GET'])
def adminpage():
    return render_template('adminpage.html')

@flaskapp.route('/login', methods = ['GET','POST'])
def login():
    if request.method == 'POST' and 'username' in request.form and 'password' in request.form
    username = request.form['username']
    password = request.form['password']
    cursor = mysql.connection.cursor(MySQLdb.cursors.DictCursor)
    cursor.execute("SELECT * FROM userinfo WHERE username =%s", [username])
    if cursor is not None:
        data =cursor.fetchone()
        passworddb = data['password']
        passchanged = data['changepass']
        isadmin = data['isadmin']
    if bcrypt.checkpw(passwordb.encode('utf-8'),password.encode('utf-8')):
        if isadmin == 0:
            if passchanged == 0:
                print("Password has not been changed")
                resp = make_response(jsonify({'url':url_for('pass_create')}))
                return resp
            if passchanged == 1:
                print("logged in")
                resp = make_response(jsonify({'url':url_for('resetpass')}))
                return resp
                cursor.close
        if isadmin == 1:
            print("logged in")
            resp = make_response(jsonify({'url':url_for('resetpass')}))
            return resp
            cursor.close
    else:
        print("Incorrect username or password")
        return render_template('success.html',error=error)


@flaskapp.route('/success', methods=['GET'])
def success():
    return render_template('success.html')


@flaskapp.route('/sendemail', methods = ['POST'])
def createaccount():
    print(request.form)
    name = request.form.get('name', type = str)
    sname = request.form.get('sname', type = str)
    mail = request.form.get('mail', type = str)
    dob = request.form.get('dob', type = str)
    is_valid = sendaccountemail.validemail(mail)
    if is_valid == True:
        yob=dob[0:4]
        daob=dob[8:10]
        mob=dob[5:7]
        dmob=daob+mob
        mdob=mob+daob
        if mob == '01':
            m3ob = "jan"
        elif mob == '02':
            m3ob = "feb"
        elif mob == '03':
            m3ob = "mar"
        elif mob == '04':
            m3ob = "apr"
        elif mob == '05':
            m3ob = "may"
        elif mob == '06':
            m3ob = "jun"
        elif mob == '07':
            m3ob = "jul"
        elif mob == '08':
            m3ob = "aug"
        elif mob == '09':
            m3ob = "sep"
        elif mob == '10':
            m3ob = "oct"
        elif mob == '11':
            m3ob = "nov"
        elif mob == '12':
            m3ob = "dec"
        else:
            return None
        userinfolist =[name.lower(),sname.lower(),mail,dmob,mdob,yob,m3ob]
        sql = "INSERT INTO userinfo (fname, sname, username, datemonthbirth, monthdatebirth, yearofbirth, monthbirth) VALUES (%s, %s, %s, %s, %s, %s, %s)"
        mycursor.execute(sql, userinfolist)
        mydb.connection.commit()
        #mydb.commit()
        result = sendaccountemail.gomail(mail, name, userinfolist)
        response_data = {
            'data': result
        }
        return make_response(jsonify(response_data))
    else:
        return ("Email is invalid")

@flaskapp.route('/resetpass', methods=['POST','GET'])
def resetpasspage():
    return render_template('resetpass.html')

@flaskapp.route('/resetpass2', methods = ['POST'])
def resetpass():
    mail = request.form.get('mail', type = str)
    mycursor.execute(f"SELECT * FROM userinfo WHERE username='{mail}'")
    udat= list(mycursor.fetchone())
    if udat == None:
        result = "No Account Found"
    else:
        id=udat.pop(0)
        id=udat.pop(8)
        id=udat.pop(3)
        id=udat.pop(7)
        result = sendaccountemail.gomailpassreset(mail, udat)
    response_data = {
        'data': result
    }
    return make_response(jsonify(response_data))

@flaskapp.route('/dashboard', methods=['POST','GET'])
def projdash():
    return render_template('user_dashboard_proj.html')

@flaskapp.route('/dashboard/new_project', methods = ['POST'])
def newproj():
    #return None
    project_name = request.form.get('project_name')
    product_name = request.form.get('product_name')
    username = "georgeswirsky@gmail.com"
    #new_project = ProjectCommands()
    message = ProjectCommands.add_data(project_name, product_name, username)
    #return make_response(message)
    return render_template('user_dashboard_proj.html')

@flaskapp.route('/dashboard/delete_project', methods = ['POST'])
def deleteproj():
    project_name = request.form.get('del_project_name')
    print(project_name)
    username = "georgeswirsky@gmail.com"
    message = ProjectCommands.delete_project(str(project_name))
    #return make_response(message)
    return render_template('user_dashboard_proj.html')

@flaskapp.route('/dashboard/delete_product', methods = ['POST'])
def deleteprod():
    project_name = request.form.get('del_project_name')
    product_name = request.form.get('del_product_name')
    print(project_name)
    username = "georgeswirsky@gmail.com"
    message = ProjectCommands.delete_product(str(project_name), str(product_name))
    #return make_response(message)
    return render_template('user_dashboard_proj.html')

@flaskapp.route('/dashboard/add_underling', methods = ['POST'])
def add_underling():
    project_name = request.form.get('project_name')
    underling_name = request.form.get('underling_name')
    underling_email = request.form.get('underling_email')
    message = UC.add_underling(str(project_name), str(underling_name), str(underling_email))
    #return make_response(message)
    return render_template('user_dashboard_proj.html')

@flaskapp.route('/dashboard/del_underling', methods = ['POST'])
def del_underling():
    project_name = request.form.get('project_name')
    underling_name = request.form.get('underling_name')
    #underling_email = request.form.get('underling_email')
    message = UC.delete_underling(str(project_name), str(underling_name))
    #return make_response(message)
    return render_template('user_dashboard_proj.html')

if __name__ == "__main__":
    flaskapp.run(host='0.0.0.0', debug = True, ssl_context = ('cert/cert.pem', 'cert/key.pem'))
