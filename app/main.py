from flask import Flask, make_response, request, render_template, redirect, jsonify, flash, url_for
from random import random
import jwt
import datetime
import re
from contextlib import closing
import time
import yagmail
import sendaccountemail as sendaccountemail
import bcrypt
import mysql.connector
from sql_init import userDB
import projectcommands as ProjectCommands
import underlingscommands as UC
from passwordcheck import pchecker
pcheck=pchecker()

flaskapp = Flask(__name__)

flaskapp.config['SECRET_KEY'] = '@#$%^&*('

mydb=userDB()
mycursor = mydb.cursor

def create_token(username, isadmin):
    validity = datetime.datetime.utcnow() + datetime.timedelta(days=15)
    token = jwt.encode({'username': username, 'exp': validity, 'isadmin' : isadmin}, flaskapp.config['SECRET_KEY'], "HS256" )
    return token

def verify_token(token):
    if token:
        decoded_token = jwt.decode(token, flaskapp.config['SECRET_KEY'], "HS256")
        username=decoded_token.get('username')
        mycursor.execute("SELECT * FROM userinfo WHERE username=%s", (username,))
        udat= mycursor.fetchone()
        if udat != None:
            return True
        else:
            return False
    else:
        return False

def verify_token_admin(token):
    if token:
        decoded_token = jwt.decode(token, flaskapp.config['SECRET_KEY'], "HS256")
        username=decoded_token.get('username')
        isadmin=decoded_token.get('isadmin')
        mycursor.execute("SELECT * FROM userinfo WHERE username=%s", (username,))
        udat= mycursor.fetchone()
        if udat != None and isadmin == True:
            return True
        else:
            return False
    else:
        return False
@flaskapp.route('/', methods = ['GET'])
def index():
    return render_template('index.html')
@flaskapp.route('/createpass', methods = ['GET','POST'])
def createpass():
    if 'token' not in request.cookies:
        return redirect('/')

    if 'token' in request.cookies:
        isUserLoggedIn = verify_token(request.cookies['token'])
        if isUserLoggedIn == False:
            return redirect('/')

    if request.method =='POST':
        password = request.form.get('password')
        password2 = request.form.get('password2')
        if password == password2:
            is_valid = pchecker.pass_check(password)
            if is_valid == True:
                resp = make_response(jsonify({'url':url_for('projdash'), 'passcorrect':'Passwords Match'}))
                hashed = bcrypt.hashpw(password.encode("utf-8"),bcrypt.gensalt())
                token = request.cookies['token']
                decoded_token = jwt.decode(token, flaskapp.config['SECRET_KEY'], "HS256")
                username = decoded_token.get('username')
                mycursor.execute(f"UPDATE userinfo SET password=%s, changepass=1 WHERE username = '{username}'", (hashed,))
                return resp
            else:
                resp = make_response(jsonify({'url':url_for('createpass'), 'passcorrect':'Password Does Not Meet Policy Requirements'}))
                return resp
        else:
            resp = make_response(jsonify({'url':url_for('createpass'), 'passcorrect':'Passwords Do Not Match'}))
            return resp
    return render_template("pass_create.html")

@flaskapp.route('/createuser', methods=['POST','GET'])
def send():
    if 'token' not in request.cookies:
        return redirect('/')

    if 'token' in request.cookies:
        isUserLoggedIn = verify_token_admin(request.cookies['token'])
        if isUserLoggedIn == False:
            return redirect('/')
    return render_template('user_create.html')


@flaskapp.route('/admin', methods=['GET'])
def adminpage():
    if 'token' not in request.cookies:
        return redirect('/')

    if 'token' in request.cookies:
        isUserLoggedIn = verify_token_admin(request.cookies['token'])
        if isUserLoggedIn == False:
            return redirect('/')
    return render_template('adminpage.html')

@flaskapp.route('/login', methods=['GET'])
def loginpage():
    return render_template('login.html')

@flaskapp.route('/logincheck', methods = ['GET','POST'])
def login():
    username = request.form.get('name', type = str)
    password = request.form.get('password', type = str)
    mycursor.execute("SELECT * FROM userinfo WHERE username =%s", [username])
    if mycursor is not None:
        data =mycursor.fetchone()
        passworddb = data[4]
        print(passworddb)
        passchanged = data[9]
        print(passchanged)
        isadmin = data[10]
        print(isadmin)
        #isadmin = 1
    if bcrypt.checkpw(password.encode('utf-8'),passworddb.encode('utf-8')):
        if isadmin == 0:
            if passchanged == 0:
                print("Password has not been changed")
                token = create_token(username, False)
                resp = make_response(jsonify({'url':url_for('createpass')}))
                resp.set_cookie('token',token)
                return resp
            elif passchanged == 1:
                print("logged in")
                token = create_token(username, False)
                resp = make_response(jsonify({'url':url_for('projdash')}))
                resp.set_cookie('token',token)
                return resp
        elif isadmin == 1:
            print("logged in")
            token = create_token(username, True)
            resp = make_response(jsonify({'url':url_for('adminpage')}))
            resp.set_cookie('token',token)
            return resp

    else:
        print("Incorrect username or password")
        return render_template('login.html')


@flaskapp.route('/sendemail', methods = ['POST'])
def createaccount():
    print(request.form)
    name = request.form.get('name', type = str)
    sname = request.form.get('sname', type = str)
    mail = request.form.get('mail', type = str)
    dob = request.form.get('dob', type = str)
    is_valid = sendaccountemail.validemail(mail)
    if is_valid == True:
        yob=dob[0:4]
        daob=dob[8:10]
        mob=dob[5:7]
        dmob=daob+mob
        mdob=mob+daob
        if mob == '01':
            m3ob = "jan"
        elif mob == '02':
            m3ob = "feb"
        elif mob == '03':
            m3ob = "mar"
        elif mob == '04':
            m3ob = "apr"
        elif mob == '05':
            m3ob = "may"
        elif mob == '06':
            m3ob = "jun"
        elif mob == '07':
            m3ob = "jul"
        elif mob == '08':
            m3ob = "aug"
        elif mob == '09':
            m3ob = "sep"
        elif mob == '10':
            m3ob = "oct"
        elif mob == '11':
            m3ob = "nov"
        elif mob == '12':
            m3ob = "dec"
        else:
            return None
        userinfolist =[name.lower(),sname.lower(),mail,dmob,mdob,yob,m3ob]
        sql = "INSERT INTO userinfo (fname, sname, username, datemonthbirth, monthdatebirth, yearofbirth, monthbirth) VALUES (%s, %s, %s, %s, %s, %s, %s)"
        mycursor.execute(sql, userinfolist)
        mydb.connection.commit()
        #mydb.commit()
        result = sendaccountemail.gomail(mail, name, userinfolist)
        response_data = {
            'data': result
        }
        return make_response(jsonify(response_data))
    else:
        return ("Email is invalid")

@flaskapp.route('/resetpass', methods=['POST','GET'])
def resetpasspage():
    if 'token' not in request.cookies:
        return redirect('/')

    if 'token' in request.cookies:
        isUserLoggedIn = verify_token_admin(request.cookies['token'])
        if isUserLoggedIn == False:
            return redirect('/')
    return render_template('resetpass.html')

@flaskapp.route('/resetpass2', methods = ['POST'])
def resetpass():
    mail = request.form.get('mail', type = str)
    mycursor.execute(f"SELECT * FROM userinfo WHERE username='{mail}'")
    udat= list(mycursor.fetchone())
    if udat == None:
        result = "No Account Found"
    else:
        id=udat.pop(0)
        id=udat.pop(8)
        id=udat.pop(3)
        id=udat.pop(7)
        result = sendaccountemail.gomailpassreset(mail, udat)
    response_data = {
        'data': result
    }
    return make_response(jsonify(response_data))

@flaskapp.route('/dashboard', methods=['POST','GET'])
def projdash():
    if 'token' not in request.cookies:
        return redirect('/')

    if 'token' in request.cookies:
        isUserLoggedIn = verify_token(request.cookies['token'])
        if isUserLoggedIn == False:
            return redirect('/')
    return render_template('user_dashboard_proj.html')

@flaskapp.route('/dashboard/new_project', methods = ['POST'])
def newproj():
    #return None
    project_name = request.form.get('project_name')
    product_name = request.form.get('product_name')
    token = request.cookies['token']
    decoded_token = jwt.decode(token, flaskapp.config['SECRET_KEY'], "HS256")
    username = decoded_token.get('username')
    #new_project = ProjectCommands()
    message = ProjectCommands.add_data(project_name, product_name, username)
    #return make_response(message)
    return render_template('user_dashboard_proj.html')

@flaskapp.route('/dashboard/delete_project', methods = ['POST'])
def deleteproj():
    project_name = request.form.get('del_project_name')
    print(project_name)
    token = request.cookies['token']
    decoded_token = jwt.decode(token, flaskapp.config['SECRET_KEY'], "HS256")
    username = decoded_token.get('username')
    message = ProjectCommands.delete_project(str(project_name), str(username))
    #return make_response(message)
    return render_template('user_dashboard_proj.html')

@flaskapp.route('/dashboard/delete_product', methods = ['POST'])
def deleteprod():
    project_name = request.form.get('del_project_name')
    product_name = request.form.get('del_product_name')
    print(project_name)
    token = request.cookies['token']
    decoded_token = jwt.decode(token, flaskapp.config['SECRET_KEY'], "HS256")
    username = decoded_token.get('username')
    message = ProjectCommands.delete_product(str(project_name), str(product_name), str(username))
    #return make_response(message)
    return render_template('user_dashboard_proj.html')

@flaskapp.route('/dashboard/add_underling', methods = ['POST'])
def add_underling():
    project_name = request.form.get('project_name')
    underling_name = request.form.get('underling_name')
    underling_email = request.form.get('underling_email')
    message = UC.add_underling(str(project_name), str(underling_name), str(underling_email))
    #return make_response(message)
    return render_template('user_dashboard_proj.html')

@flaskapp.route('/dashboard/del_underling', methods = ['POST'])
def del_underling():
    project_name = request.form.get('project_name')
    underling_name = request.form.get('underling_name')
    #underling_email = request.form.get('underling_email')
    message = UC.delete_underling(str(project_name), str(underling_name))
    #return make_response(message)
    return render_template('user_dashboard_proj.html')

@flaskapp.route('/dashboard/projects', methods = ['GET'])
def seeprojects():
    if 'token' not in request.cookies:
        return redirect('/')

    if 'token' in request.cookies:
        isUserLoggedIn = verify_token(request.cookies['token'])
        if isUserLoggedIn == False:
            return redirect('/')
    token = request.cookies['token']
    decoded_token = jwt.decode(token, flaskapp.config['SECRET_KEY'], "HS256")
    username = decoded_token.get('username')
    projects = ProjectCommands.get_projects_names(username)
    print(projects)
    array = []

    for project in projects:
        product = ProjectCommands.get_products_from_projects(project)
        underlings = UC.get_underlings_from_projects(project)
        list = [project,product,underlings]
        array.append(list)


    return render_template("projectstable.html",array = array)

@flaskapp.route('/logout')
def logout():
    token = request.cookies['token']
    # with closing(sqlite3.connect("tokens.db")) as connection:
    #     with closing(connection.cursor()) as cursor:
    #         cursor.execute(f"INSERT INTO banned_tokens (token) VALUES (?);",(str(token),))
    #         connection.commit()
    resp = make_response(render_template('logout.html'))
    resp.delete_cookie('token')
    return resp

if __name__ == "__main__":
    flaskapp.run(host='0.0.0.0', debug = True, ssl_context = ('cert/cert.pem', 'cert/key.pem'))
