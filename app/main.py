from flask import Flask, make_response, request, url_for, render_template, redirect, jsonify, flash
from random import random
from registration import RegistrationForm, LoginForm
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager, UserMixin, login_user, current_user
from flask_admin import Admin
from flask_admin.contrib.sqla import ModelView
import jwt
import datetime

'''
-go to /register first
-/admin allows to manually add/remove from database
'''

flask_app = Flask(__name__)
flask_app.config['SECRET_KEY']  = "E3BE5237385B63455D6EE77359137"
flask_app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///site.db'
db = SQLAlchemy(flask_app)
login_manager = LoginManager(flask_app)

@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))


class User(db.Model, UserMixin):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(20), unique=True, nullable=False)
#   email = db.Column(db.String(120), unique=True, nullable=False)
    password = db.Column(db.String(60), nullable=False)

    def __repr__(self):
        return f"User('{self.username}')"

class MyModelView(ModelView):
    def is_accessible(self):
        return current_user.is_authenticated

admin = Admin(flask_app)
admin.add_view(ModelView(User, db.session))

def verify_token(token):
    if token:
        decoded_token = jwt.decode(token, flask_app.config['SECRET_KEY'], "HS256")
        print(decoded_token)
        return True
    else:
        return False

@flask_app.route('/')
def index():
    logged_in = False
    if 'token' in request.cookies:
        logged_in = verify_token(request.cookies['token'])
    if logged_in:
        return 'Welcome Back!'
    else:
        user_id = random()
        print(f"User ID: {user_id}")
        resp = make_response(render_template('index.html'))
        resp.set_cookie('user_id', str(user_id))
        return resp

@flask_app.route('/register', methods=['GET', 'POST'])
def register():
    form = RegistrationForm()

    if form.validate_on_submit():
        user = User(username=form.username.data, password=form.password.data)
        db.session.add(user)
        db.session.commit()
        flash('You account has been created! You are now able to log in', 'success')
        return redirect(url_for('login_page'))
    else:
        return render_template('register.html', title='Register', form=form)

@flask_app.route('/login', methods=['GET', 'POST'])
def login_page():
    form = LoginForm()
    if form.validate_on_submit():
        user = User.query.filter_by(username=form.username.data).first()
        password = User.query.filter_by(password=form.password.data)
        if user and password:
            login_user(user)
            return redirect(url_for('index'))
    else:
        flash('Login Unsuccessful')
    return render_template('login1.html', title='Login', form=form)

def create_token(username, password):
    validity = datetime.datetime.utcnow() + datetime.timedelta(days=15)
    token = jwt.encode({'user_id': 123154, 'username': username, 'exp': validity}, flask_app.config['SECRET_KEY'], "HS256" )
    return token

@flask_app.route('/authenticate', methods = ['POST'])
def authenticate_users():
    data = request.form
    username = data['username']
    password = data['password']

    user_token = create_token(username, password)

    resp = make_response(redirect('/users'))
    resp.set_cookie('token', user_token)
    return resp

@flask_app.route('/users', methods = ['GET'])
def users_only():
    logged_in = False
    if 'token' in request.cookies:
        logged_in = verify_token(request.cookies['token'])

    if logged_in:
        return render_template("users.html")
    else:
        # status_code = flask.Response(status=404)
        # return status_code
        resp = make_response(redirect('/login'))
        return resp

if __name__ == '__main__':
    flask_app.run(debug=True, ssl_context=('cert/cert.pem', 'cert/key.pem'))
