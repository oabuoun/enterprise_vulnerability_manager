import yagmail
import random
import re
from passwordcheck import pchecker
pcheck=pchecker()
import mysql.connector
import bcrypt
from sql_init import userDB
import underlingscommands as UC
import projectcommands as PC
from Scrapers import NVD_Scrape, VulDB_Scrape, cvedetails

mydb=userDB()
mycursor = mydb.cursor

def passgen(userinfo):
    char_lower= "abcdefghijklmnopqrstuvwxyz"
    char_upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    sym = "!@$%^&*()-_=+[{}]|<,.>/?"
    num = "123456789"
    #Below are the required lengths and number of special characters in the generated password.

    required_char_lower=2
    required_char_upper=2
    required_char_sym=2
    required_char_num=2

    while True:
        password_len = 16
        password = ""
        if required_char_lower > 0:
            for x in range(0,required_char_lower):
                password = password + random.choice(char_lower)
        if required_char_upper > 0:
            for x in range(0,required_char_upper):
                password = password + random.choice(char_upper)
        if required_char_sym > 0:
            for x in range(0,required_char_sym):
                password = password + random.choice(sym)
        if required_char_num > 0:
            for x in range(0,required_char_num):
                password = password + random.choice(num)

        password_len = password_len - required_char_lower - required_char_upper - required_char_num - required_char_sym
#Below will randomise the order of the uppercase lowercase symbols and numbers
        for x in range(0,password_len):
            randomiser = random.randint(1,4)
            if randomiser == 1:
                password = password + random.choice(char_lower)
            elif randomiser == 2:
                password = password + random.choice(char_upper)
            elif randomiser == 3:
                password = password + random.choice(sym)
            elif randomiser == 4:
                password = password + random.choice(num)
#Below will join the different items together randomly to form one string.
        password = ''.join(random.sample(password, len(password)))
        uservalid = pcheck.compare(userinfo, password)
        listvalid = pcheck.list_check(password)
        if listvalid != 1 and uservalid != 1:
            return password

def validemail(email):
    regex = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'
    if(re.fullmatch(regex, email)):
        return True
    else:
        return False

def gomail(recipientemail, recipient, userinfo):
    receiver = recipientemail

    newpass = passgen(userinfo)
    hashed = bcrypt.hashpw(newpass.encode("utf-8"),bcrypt.gensalt())
    mycursor.execute(f"UPDATE userinfo SET password=%s, changepass=0 WHERE username = '{receiver}'", (hashed,))
    body = [
    f"Hello {recipient},",
    "Here is you gold star and randomly generated password!",
    f"Username = {receiver}",
    f"Password = {newpass}",
    "I hope you enjoy!"
    ]
    filename = "goldstar.jpg"
    #with open('app/templates/email.html', 'r') as f:
        #html_string = f.read()
    mydb.connection.commit()
    #mydb.commit()
    try:
        yag = yagmail.SMTP("sparta.vulnad@gmail.com", 'bBV:`T4qJwL}}&5H')
        yag.send(
            to=receiver,
            subject="Your New Vulnerability Scanner Account",
            #contents=html_string,
            contents=body,
            attachments=filename,
        )
        return ("Email Sent")

    except:
        return ("Email Failed to Send")

def gomailpassreset(recipientemail, userinfo):
    receiver = recipientemail
    print(userinfo)
    newpass = passgen(userinfo)
    hashed = bcrypt.hashpw(newpass.encode("utf-8"),bcrypt.gensalt())
    mycursor.execute(f"UPDATE userinfo SET password=%s, changepass=0 WHERE username = '{receiver}'", (hashed,))

    body = [
    f"Hello,",
    "Your password has been reset and you have been given a randomly generated password!",
    f"Username = {receiver}",
    f"Password = {newpass}",
    "I hope you enjoy!"
    ]
    #with open('app/templates/email.html', 'r') as f:
        #html_string = f.read()
    mydb.connection.commit()
    #mydb.commit()
    try:
        yag = yagmail.SMTP("sparta.vulnad@gmail.com", 'bBV:`T4qJwL}}&5H')
        yag.send(
            to=receiver,
            subject="Resetting of Your Password",
            #contents=html_string,
            contents=body,
        )
        return ("Email Sent")

    except:
        return ("Email Failed to Send")

def sendupdateemail():
    products_to_scrape = PC.get_products()
    #new_vul = VulDB_Scrape.cve_search(products_to_scrape)
    new_nvd = NVD_Scrape.cve_search(products_to_scrape)
    new_cvedetails = cvedetails.get_update(products_to_scrape)
    cve_id = new_nvd.copy()
    cve_id.update(new_cvedetails)
    cve_id.update(new_vul)
    for key in cve_id:
        product=cve_id[key][3]
        description=cve_id[key][0]
        cve_score=cve_id[key][1]
        project=PC.get_projects_from_product(product)
        underlingemail=UC.get_underling_email(project)
        usernamelist=PC.get_username_from_product(product)
        emailist=underlingemail+usernamelist
        for i in emailist:
            body = [
            project,
            product,
            key,
            cve_score,
            description
            ]
            yag = yagmail.SMTP("sparta.vulnad@gmail.com", 'bBV:`T4qJwL}}&5H')
            yag.send(
                to=i,
                subject="CVE Update on Project",
                contents=body,
            )

if __name__ == '__main__':
    sendupdateemail()
