import mysql.connector as mysql
from sql_init import ProjectDB
import bcrypt

def init():
    global mydb
    mydb=ProjectDB()
    global mycursor
    mycursor = mydb.cursor

#class ProjectCommands:
def create_database(self):
    mycursor.execute("CREATE DATABASE projects;")
    mydb.connection.commit()

def create_table(self):
     mycursor.execute("CREATE TABLE projecttable (id INT AUTO_INCREMENT PRIMARY KEY, project VARCHAR(255), product VARCHAR(255), username VARCHAR(255));")
     mydb.connection.commit()

def init_project():
    with open("config_sql", "r") as file:
        configs = file.readlines()
        file.close()
    with open("sqlpassword", "r") as file:
            sqlpassword = file.read().strip()
            file.close()
    conn = mysql.connect(host='54.78.230.206', user='root', password='my_secret_password')
    mycursor = conn.cursor()
    database_exists = False
    table_exists = False
    # conn = mysql.connect(host=HOST, user=USER, password=PASSWD)
    #
    # cursor = conn.cursor()
    mycursor.execute("SHOW DATABASES")
    for i in mycursor:
        print(i)
        if 'projects' in i:
            database_exists = True
            print("projects Database found")
    if database_exists == False:
        mycursor.execute("CREATE DATABASE projects")
        print("projects Database created")
    print("----------------------------------------")
    conn.commit()
    conn.close()

    conn = mysql.connect(host='54.78.230.206', user='root', password='my_secret_password', database='projects')
    mycursor = conn.cursor()
    mycursor.execute("SHOW TABLES")
    for j in mycursor:
        print(j)
        if 'projecttable' in j:
            table_exists = True
            print("projecttable Table found")

    if table_exists == False:
        mycursor.execute("CREATE TABLE projecttable (id INT AUTO_INCREMENT PRIMARY KEY, project VARCHAR(255), product VARCHAR(255), username VARCHAR(255));")
        print("projecttable Table created")
        print("-----------------------------------------------")
    conn.commit()
    conn.close()
    return

def init_user_info():
    with open("config_sql", "r") as file:
        configs = file.readlines()
        file.close()
    with open("sqlpassword", "r") as file:
            sqlpassword = file.read().strip()
            file.close()
    conn = mysql.connect(host='54.78.230.206', user='root', password='my_secret_password')
    mycursor = conn.cursor()
    database_exists = False
    table_exists = False
    # conn = mysql.connect(host=HOST, user=USER, password=PASSWD)
    #
    # cursor = conn.cursor()
    mycursor.execute("SHOW DATABASES")
    for i in mycursor:
        print(i)
        if 'userinfotest' in i:
            database_exists = True
            print("userinfotest database found")
    if database_exists == False:
        mycursor.execute("CREATE DATABASE userinfotest")
        print("userinfotest Database created")
    print("----------------------------------------")
    conn.commit()
    conn.close()

    conn = mysql.connect(host='54.78.230.206', user='root', password='my_secret_password', database='userinfotest')
    mycursor = conn.cursor()
    mycursor.execute("SHOW TABLES")
    for j in mycursor:
        print(j)
        if 'userinfo' in j:
            table_exists = True
            print("userinfo table found")

    if table_exists == False:
        mycursor.execute("CREATE TABLE userinfo (id INT AUTO_INCREMENT PRIMARY KEY, fname VARCHAR(255), sname VARCHAR(255), username VARCHAR(255) UNIQUE, password VARCHAR(64), datemonthbirth VARCHAR(255), monthdatebirth VARCHAR(255), yearofbirth VARCHAR(255), monthbirth VARCHAR(255), changepass BOOL, isadmin BOOL);")
        print("userinfo Table created")
        print("-----------------------------------------------")
    
    username='admin'
    newpass = "root"
    hashed = bcrypt.hashpw(newpass.encode("utf-8"),bcrypt.gensalt())
    mycursor.execute(f"UPDATE userinfo SET password=%s, changepass=0, isadmin=1 WHERE username = '{username}'", (hashed,))
    conn.commit()
    conn.close()
    init()
    return

def add_data(project,product,username):
    mycursor.execute(f"INSERT INTO projecttable (project, username) VALUES ('{project}','{username}');")
    mydb.connection.commit()
    mycursor.execute(f"INSERT INTO projecttable (project, product, username) VALUES ('{project}','{product}','{username}');")
    mydb.connection.commit()

def delete_project(project, username):
    mycursor.execute(f"DELETE FROM projecttable WHERE project = '{project}' AND username = '{username}';")
    mydb.connection.commit()
    mycursor.execute(f"DELETE FROM underlings WHERE project = '{project}';")
    mydb.connection.commit()

def delete_product(project,product,username):
    mycursor.execute(f"DELETE FROM projecttable WHERE project = '{project}' AND product = '{product}' AND username = '{username}';")
    mydb.connection.commit()

def delete_table(self):
    mycursor.execute(f"DROP TABLE projecttable ;")
    mydb.connection.commit()

def get_projects_names(user):
    mycursor.execute(f"SELECT project FROM projecttable where username = '{user}';")
    data = mycursor.fetchall()
    print(data)
    list = []
    for i in data:
        check = i[0]
        print(check)
        if check not in list:
            list.append(check)
    return list

def get_projects_from_product(product):
    mycursor.execute(f"SELECT project FROM projecttable where product = '{product}';")
    data = mycursor.fetchall()
    list = []
    for i in data:
        list.append(i)
    return list

def get_username_from_product(product):
    mycursor.execute(f"SELECT username FROM projecttable where product = '{product}';")
    data = mycursor.fetchall()
    list = []
    for i in data:
        list.append(i)
    return list

def get_products():
    mycursor.execute(f"SELECT product FROM projecttable;")
    data = mycursor.fetchall()
    list = []
    for i in data:
        list.append(i[0])
    return list

def get_products_from_projects(project):
    mycursor.execute(f"SELECT product FROM projecttable where project = '{project}';")
    data = mycursor.fetchall()
    list = []
    strval = ''
    for i in data:
        if i[0] == None:
            print('nothing')
        elif i[0] not in list:
            list.append(i[0])
            strval = strval + f', {i[0]}'
    listnum = strval
    return listnum
#if __name__ == "__main__":
    #create_database()
    #create_table()
    #ProjectCommands.add_data('Azure','Microsoft','Daniel')
    #delete_project('Azure')
    #delete_product('Azure','Microsoft')
    #delete_table()
