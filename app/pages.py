# @component Internet:Guest (#guest)
# @component Internet:AuthenticatedUser (#auser)
# @component Internet:SysAdmin (#sysadmin)

# @threat Out of Scope (#out)
# @exposes #guest to Out of scope with cannot change
# @threat Out of Scope (#out)
# @exposes #auser to Out of scope with cannot change

# @component Server:/home (#home)
# @connects #guest to #home with HTTP-GET
# @connects #home to guest with HTTP-GET
# @connects #auser to #home with HTTP-POST
# @connects #home to #auser with HTTP-POST

# @threat Cross site scripting (reflected) (#xss)
# @exposes #home to javascript manipulation with #xss

@app.route('/')
def home():
    return render_template('home.html')

# @component Server:/register (#register)
# @connects #home with #register with Links
# @connects #guest to #register with HTTP-POST
# @connects #register to #guest with HTTP-POST

# @threat Brute force attack (#brute)
# @exposes #login to privilege escalation with #brute
# @exposes #logout to information disclosure with #brute
# @exposes #auser to information disclosure with #brute

# @threat SQL injection (#sqlinjection)
# @exposes #createuser to #sqlinjection with #sqlinjection

@app.route('/register', methods=["GET", "POST"])
def register():
    if request.method == 'GET':
        return render_template("register.html")
    elif request.method == 'POST':
        name = request.form['name']
        email = request.form['email']
        password = request.form['password'].encode('utf-8')
        hash_password = bcrypt.hashpw(password, bcrypt.gensalt())

        print(hash_password)

        try:
            with connect(
                host="localhost",
                user="root",
                password="my_secret_password",
                database="flask_db",
            ) as connection:
                print(connection)
                # show_db_query = "INSERT INTO users (name,email,password) VALUES ('m', 'mo@gmail.com', '$2b$12$Drvh3ciJXg6MQzrntTwuu.6LfgcgwRdD6knq4gBd4favOc.pb8tO6')"
                show_db_query = "INSERT INTO users (name,email,password) VALUES (%s,%s,%s)"
                query_values = (name,email,hash_password)
                with connection.cursor() as cursor:
                    cursor.execute(show_db_query, query_values)
                    connection.commit()
                    # for db in cursor:
                    #     print(db)
        except Error as e:
            print(e)
        session['name'] = name
        session['email'] = email
        return redirect(url_for("home"))

# @component Server:/login (#login)
# @connects #home to #login with Links
# @connects #guest to #login with HTTP-POST
# @connects #login to #guest with HTTP-POST
@app.route('/login')
def login_page():
    return render_template('login.html')

# @component Server:/authenticate (#authenticate)
# @connects #login to #authenticate with Links
# @connects #auser to #authenticate with HTTP-POST
# @connects #authenticate to #auser with HTTP-POST
@app.route('/authenticate')

# @component Server:/logout (#logout)
# @connects #home to #logout with Links
# @connects #auser to #logout with HTTP-POST
# @connects #logout to #auser with HTTP-POST
@app.route('/logout')

# @component Server:/user (#user)
# @connects #home to #user with Links
# @connects #auser to #user with HTTP-GET
# @connects #user to #auser with HTTP-GET
@app.route('/user')
def user_index():
    return "This is the User Index page"

# @component Server:/scanner (#scanner)
# @connects #user to #scanner with Links
# @connects #auser to #scanner with HTTP-POST
# @connects #scanner to #auser with HTTP-GET
@app.route('/user/vulnerability_scanner')
def user_vulnerability_scanner():
    return "This is the User Vulnerability Scanner page"

# @component Server:/admin (#admin)
# @connects #home to #admin with Links
# @connects #sysadmin to #admin with HTTP-POST
# @connects #admin to #sysadmin with HTTP-POST
@app.route('/admin')
def admin_index():
    return "This is the Admin Index page"

# @component Server:/createUser (#createuser)
# @connects #admin to #create user with Links
# @connects #sysadmin to #createuser with HTTP-POST
# @connects #createuser to #sysadmin with HTTP-POST
@app.route('/create_user')
def admin_create_users():
    return "This is an admin priviledge page to create users"



# @component Server:/createpass (#createpass)
# @connects #admin to #createpass with Links
# @connects #sysadmin to #createpass with HTTP-POST
# @connects #createpass to #sysadmin with HTTP-POST
@app.route('/createpass')

# @component Server:/success (#success)
# @connects #createpass to #success with Links
# @connects #sysadmin to #success with HTTP-GET
# @connects #success to sysadmin with HTTP-GET
@flaskapp.route('/success', methods=['GET'])
def success():
    return render_template('success.html')

# @component Server:/sendemail (#sendemail)
# @connects #admin to #sendemail with Links
# @connects #sysadmin to #sendemail with HTTP-POST
# @connects #sendemail to #sysadmin with HTTP-GET
@flaskapp.route('/sendemail', methods = ['POST'])

# @component Server:/resetpass (#resetpass)
# @connects #admin to #resetpass with Links
# @connects #sysadmin to #resetpass with HTTP-POST
# @connects #resetpass to #sysadmin with HTTP-GET
@flaskapp.route('/resetpass', methods=['POST','GET'])

# @component Server:/dashboard (#dashboard)
# @connects #admin to #dashboard with Links
# @connects #sysadmin to #dashboard with HTTP-GET
# @connects #dashboard to #sysadmin with HTTP-GET
@flaskapp.route('/dashboard', methods=['POST','GET'])

# @component Server:/dashboard/new_project (#newproject)
# @connects #dashboard to #newproject with Links
# @connects #sysadmin to #newproject with HTTP-POST
# @conects #newproject to #sysadmin with HTTP-GET
@flaskapp.route('/dashboard/new_project', methods = ['POST'])

# @component Server:/dashboard/delete_project (#deleteproject)
# @connects #dashboard to #deleteproject with Links
# @connects #sysadmin to #deleteproject with HTTP-POST
# @conects #deleteproject to #sysadmin with HTTP-GET
@flaskapp.route('/dashboard/delete_project', methods = ['POST'])

# @component Server:/dashboard/add_underling (#addunderling)
# @connects #dashboard to #addunderling with Links
# @connects #sysadmin to #addunderling with HTTP-POST
# @connects #addunderling to #sysadmin with HTTP-POST
@flaskapp.route('/dashboard/add_underling', methods = ['POST'])

# @component Server:/dashboard/del_underling (#delunderling)
# @connects dashboard to #delunderling with Links
# @connects #sysadmin to #delunderling with HTTP-POST
# @conects #delunderling to #sysadmin with HTTP-POST
@flaskapp.route('/dashboard/del_underling', methods = ['POST'])

if __name__ == '__main__':
    print("This is the web app")
    app.secret_key = "012#!jadfkiGg)(*%$"
    app.run(debug = True, ssl_context = ('cert/cert.pem', 'cert/key.pem'))
